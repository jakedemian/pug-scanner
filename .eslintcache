[{"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\reportWebVitals.js":"1","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\App.js":"2","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\index.js":"3","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\pages\\UnderConstruction.js":"4","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\pages\\Homepage.js":"5","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\components\\PlayerCard.js":"6","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\utilities\\ColorMaps.js":"7","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\components\\GroupSummary.js":"8"},{"size":362,"mtime":1609784675909,"results":"9","hashOfConfig":"10"},{"size":187,"mtime":1610084723883,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1609806392647,"results":"12","hashOfConfig":"10"},{"size":296,"mtime":1609806407250,"results":"13","hashOfConfig":"14"},{"size":12247,"mtime":1610600728601,"results":"15","hashOfConfig":"10"},{"size":7340,"mtime":1610489004154,"results":"16","hashOfConfig":"10"},{"size":503,"mtime":1610117535734,"results":"17","hashOfConfig":"10"},{"size":2350,"mtime":1610488873640,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e2grlc",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fxlcws",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\reportWebVitals.js",[],"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\App.js",["37"],"import logo from './logo.svg';\nimport Homepage from './pages/Homepage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Homepage/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\index.js",[],"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\pages\\UnderConstruction.js",["38"],"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\pages\\Homepage.js",["39","40","41","42"],"import {makeStyles} from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport React, {useEffect, useState, useRef} from 'react';\r\nimport {TextField, Typography} from '@material-ui/core';\r\nimport PlayerCard from '../components/PlayerCard';\r\nimport logo from '../assets/images/logo.png';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport GroupSummary from \"../components/GroupSummary\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    },\r\n    wrapper: {\r\n        width: 850\r\n    },\r\n    mainTextField: {\r\n        width: \"100%\",\r\n        \"& .MuiOutlinedInput-root.Mui-focused fieldset\": {\r\n            borderColor: \"#fca503\"\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n            color: \"white\",\r\n            backgroundColor: \"#111\",\r\n            \"& textarea::placeholder\": {\r\n                color: \"#eee\"\r\n            }\r\n        }\r\n    },\r\n    cardWrapper: {\r\n        marginTop: 16,\r\n        width: \"100%\"\r\n    },\r\n    cardGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"50% 50%\",\r\n    }\r\n});\r\n\r\n// Primepriest-Stormrage;Orillun-Stormrage;Kupunch-Stormrage;Vespe-Stormrage;Fancymoose-Stormrage;Bigoofta-Stormrage\r\n\r\n// _group:Primepriest-Stormrage\r\n// _applicants:Kmalock-Quel'Thalas;Dunnmor-MoonGuard;Manwarrior-MoonGuard;Sándalo-Quel'Thalas;Fandango-Quel'Thalas;Acerok-Proudmoore;Emò-Whisperwind;Eviefroggiee-Sargeras;Lchylch-Proudmoore;Neall-Medivh;Atafloosy-Medivh;Sigemund-Lightbringer;Kaaili-Stormrage;Lhozz-Stormrage;Hthhappy-Frostmourne;Kawaie-Frostmourne;Dulaameng-Frostmourne;Phenose-Frostmourne;Bellcroisse-Quel'Thalas;Opercar-Kel'Thuzad;Eckopappa-Sargeras;Zaphyria-Frostmourne;Zaevion-Stormrage;Barbaguisada-Hellscream;Keegunz-EmeraldDream;Teekpp-Sargeras;Azraäel-Quel'Thalas;\r\nconst Homepage = props => {\r\n    const classes = useStyles();\r\n    const inputRef = useRef(null);\r\n\r\n    const [pastedString, setPastedString] = useState(\"\");\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [failedCharacters, setFailedCharacters] = useState([]);\r\n    const [players, setPlayers] = useState([]);\r\n    const [applicants, setApplicants] = useState([]);\r\n\r\n    const [scoreColors, setScoreColors] = useState([]);\r\n\r\n    const getScoreColor = score => {\r\n        if(!scoreColors && scoreColors.length == 0 && isNaN(Number(score))){\r\n            return \"#0e0e0e\";\r\n        }\r\n\r\n        for(const scoreData of scoreColors){\r\n            if(score < scoreData.score){\r\n                continue;\r\n            }\r\n            return scoreData.rgbHex;\r\n        }\r\n    };\r\n\r\n    const getScoreTextColor = score => {\r\n        // get background color as int array\r\n        if(!scoreColors && scoreColors.length == 0 && isNaN(Number(score))){\r\n            return \"#FFFFFF\";\r\n        }\r\n\r\n        let colorIntArray = [];\r\n        for(const scoreData of scoreColors){\r\n            if(score < scoreData.score){\r\n                continue;\r\n            }\r\n\r\n            colorIntArray = scoreData.rgbInteger;\r\n        }\r\n\r\n        const brightness = Math.round(((parseInt(colorIntArray[0]) * 299) +\r\n            (parseInt(colorIntArray[1]) * 587) +\r\n            (parseInt(colorIntArray[2]) * 114)) / 1000);\r\n\r\n        return (brightness > 125) ? '#000' : '#fff';\r\n    };\r\n\r\n    const fetchScoreColors = async () => {\r\n        let url = \"https://raider.io/api/v1/mythic-plus/score-tiers?season=current\";\r\n        let res = await axios.get(url);\r\n        setScoreColors(res.data);\r\n    };\r\n\r\n    const fetchPlayers = async () => {\r\n        setIsFetching(true);\r\n        const groupStringStart = pastedString.indexOf(\"_group:\") + \"_group:\".length;\r\n        const groupStringEnd = pastedString.substr(groupStringStart).indexOf(\"\\n\");\r\n        const groupString = pastedString.substr(groupStringStart, groupStringEnd);\r\n\r\n        const applicantsStart = pastedString.indexOf(\"_applicants:\") + \"_applicants:\".length;\r\n        const applicantsEnd = pastedString.substr(applicantsStart).indexOf(\"\\n\");\r\n        const applicantsString = pastedString.substr(applicantsStart, applicantsEnd);\r\n\r\n\r\n        let groupNamesArray = groupString.split(\";\");\r\n        let groupNameData = [];\r\n\r\n        for (let i = 0; i < groupNamesArray.length; i++) {\r\n            if(groupNamesArray[i].trim().length === 0){\r\n                continue;\r\n            }\r\n\r\n            let character = groupNamesArray[i].split(\"-\");\r\n            groupNameData.push({\r\n                \"name\": character[0],\r\n                \"realm\": character[1]\r\n            })\r\n        }\r\n\r\n        let playersArray = [];\r\n\r\n        let failed = [];\r\n        let url = \"https://raider.io/api/v1/characters/profile?region=us&fields=gear,guild,covenant,mythic_plus_ranks,raid_progression,mythic_plus_scores_by_season:current,mythic_plus_recent_runs,mythic_plus_best_runs&\";\r\n        for (let i = 0; i < groupNameData.length; i++) {\r\n            let thisUrl = url + \"realm=\" + groupNameData[i].realm + \"&name=\" + groupNameData[i].name;\r\n\r\n            let res;\r\n            try {\r\n                res = await axios.get(thisUrl);\r\n            } catch (err) {\r\n                failed.push(groupNameData[i].name + \"-\" + groupNameData[i].realm);\r\n                console.error(err);\r\n                continue;\r\n            }\r\n\r\n            playersArray.push(res.data);\r\n        }\r\n\r\n        // move this to a getapplicants function\r\n        let applicantNamesArray = applicantsString.split(\";\");\r\n        let applicantNameData = [];\r\n\r\n        for (let i = 0; i < applicantNamesArray.length; i++) {\r\n            if(applicantNamesArray[i].trim().length === 0){\r\n                continue;\r\n            }\r\n\r\n            let character = applicantNamesArray[i].split(\"-\");\r\n            applicantNameData.push({\r\n                \"name\": character[0],\r\n                \"realm\": character[1]\r\n            })\r\n        }\r\n\r\n        let applicantsArray = [];\r\n        for (let i = 0; i < applicantNameData.length; i++) {\r\n            let thisUrl = url + \"realm=\" + applicantNameData[i].realm + \"&name=\" + applicantNameData[i].name;\r\n\r\n            let res;\r\n            try {\r\n                res = await axios.get(thisUrl);\r\n            } catch (err) {\r\n                failed.push(applicantNameData[i].name + \"-\" + applicantNameData[i].realm);\r\n                console.error(err);\r\n                continue;\r\n            }\r\n\r\n            applicantsArray.push(res.data);\r\n        }\r\n\r\n        if (failed.length > 0) {\r\n            setFailedCharacters(failed);\r\n            console.log(\"Failed to load the following characters: \", failedCharacters);\r\n        }\r\n\r\n        setPlayers(playersArray);\r\n        setApplicants(applicantsArray);\r\n        setIsFetching(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"pasted string is\", pastedString);\r\n        if (!!pastedString) {\r\n            fetchPlayers();\r\n        }\r\n    }, [pastedString]);\r\n\r\n    useEffect(() => {\r\n        fetchScoreColors();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.wrapper}>\r\n                <div>\r\n                    <img src={logo} className=\"inline\"/>\r\n                    <div className=\"inline-block\" style={{transform: \"translateY(7px)\"}}>\r\n                        <Typography className=\"text-gray-500 italic\">v0.3</Typography>\r\n                    </div>\r\n                </div>\r\n                <TextField\r\n                    ref={inputRef}\r\n                    className={classes.mainTextField}\r\n                    placeholder=\"Paste /ps string here\"\r\n                    autoFocus\r\n                    multiline\r\n                    rows={4}\r\n                    variant=\"outlined\"\r\n                    value={pastedString}\r\n                    onKeyPress={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }}\r\n                    onPaste={(e) => {\r\n                        if (pastedString !== e.clipboardData.getData('Text')) {\r\n                            // only set if not exactly the same, otherwise it doesnt work right\r\n                            setPastedString(e.clipboardData.getData('Text'));\r\n                            setFailedCharacters([]);\r\n                        }\r\n                        e.stopPropagation();\r\n                    }}\r\n                />\r\n                {!!pastedString && (\r\n                    <div>\r\n                        <Button\r\n                            className=\"text-white\"\r\n                            onClick={() => {\r\n                                setPastedString(\"\");\r\n                                inputRef.current.querySelector(\"textarea\").value = \"\";\r\n                                setPlayers([]);\r\n                                setApplicants([]);\r\n                                setFailedCharacters([]);\r\n                            }}\r\n                        >\r\n                            Clear\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n\r\n                {failedCharacters.length > 0 && (\r\n                    <Alert severity=\"warning\">\r\n                        <AlertTitle>Failed to load the following characters:</AlertTitle>\r\n                        {failedCharacters.map((character, index) => {\r\n                            return (\r\n                                <Typography key={index} variant=\"caption\" className=\"block\">{character}</Typography>\r\n                            )\r\n                        })}\r\n                    </Alert>\r\n                )}\r\n\r\n                <div className={classes.cardWrapper}>\r\n                    {isFetching ? (\r\n                        <div className=\"w-full flex flex-col items-center justify-center\">\r\n                            <CircularProgress style={{color: \"#fca503\"}}/>\r\n                            <Typography className=\"text-white\">Retreiving character info...</Typography>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <GroupSummary players={players} getScoreColor={getScoreColor} getScoreTextColor={getScoreTextColor}/>\r\n\r\n                            {!!players && !!players.length > 0 && (\r\n                                <div className=\"mt-16\">\r\n                                <Typography variant=\"h5\" className=\"text-white\">Your Group</Typography>\r\n                                <div className={classes.cardGrid}>\r\n                                    {players.map((player, index) => {\r\n                                        return (\r\n                                            <div key={index} className={classes.cardWrapper}>\r\n                                                <PlayerCard player={player} getScoreColor={getScoreColor}/>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            )}\r\n\r\n                            {!!applicants && !!applicants.length > 0 && (\r\n                            <div className=\"mt-16\">\r\n                                <Typography variant=\"h5\" className=\"text-white\">Group Finder Applicants</Typography>\r\n                                <div className={classes.cardGrid}>\r\n                                    {applicants.map((player, index) => {\r\n                                        return (\r\n                                            <div key={index} className={classes.cardWrapper}>\r\n                                                <PlayerCard player={player} getScoreColor={getScoreColor}/>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","C:\\Users\\Jake\\Projects\\pug-scanner\\src\\components\\PlayerCard.js",["43","44","45","46","47"],"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\utilities\\ColorMaps.js",[],"C:\\Users\\Jake\\Projects\\pug-scanner\\src\\components\\GroupSummary.js",[],{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":7,"column":13,"nodeType":"54","endLine":7,"endColumn":80},{"ruleId":"55","severity":1,"message":"56","line":62,"column":47,"nodeType":"57","messageId":"58","endLine":62,"endColumn":49},{"ruleId":"55","severity":1,"message":"56","line":76,"column":47,"nodeType":"57","messageId":"58","endLine":76,"endColumn":49},{"ruleId":"59","severity":1,"message":"60","line":194,"column":8,"nodeType":"61","endLine":194,"endColumn":22,"suggestions":"62"},{"ruleId":"52","severity":1,"message":"53","line":204,"column":21,"nodeType":"54","endLine":204,"endColumn":57},{"ruleId":"48","severity":1,"message":"63","line":10,"column":8,"nodeType":"50","messageId":"51","endLine":10,"endColumn":13},{"ruleId":"48","severity":1,"message":"64","line":11,"column":8,"nodeType":"50","messageId":"51","endLine":11,"endColumn":13},{"ruleId":"52","severity":1,"message":"53","line":78,"column":25,"nodeType":"54","endLine":78,"endColumn":117},{"ruleId":"52","severity":1,"message":"53","line":111,"column":180,"nodeType":"54","endLine":111,"endColumn":229},{"ruleId":"52","severity":1,"message":"53","line":112,"column":151,"nodeType":"54","endLine":112,"endColumn":205},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPlayers'. Either include it or remove the dependency array.","ArrayExpression",["65"],"'Slide' is defined but never used.","'Paper' is defined but never used.",{"desc":"66","fix":"67"},"Update the dependencies array to be: [fetchPlayers, pastedString]",{"range":"68","text":"69"},[7064,7078],"[fetchPlayers, pastedString]"]